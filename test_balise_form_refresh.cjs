const { execSync } = require('child_process');

console.log('üß™ Test de correction du probl√®me de rafra√Æchissement du formulaire de balise\n');

// Test 1: V√©rifier que le serveur Django fonctionne
console.log('1Ô∏è‚É£ Test de connexion au serveur Django...');
try {
  const response = execSync('curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/balises/', { encoding: 'utf8' });
  if (response.trim() === '200') {
    console.log('‚úÖ Serveur Django accessible');
  } else {
    console.log('‚ùå Serveur Django non accessible (code:', response.trim(), ')');
  }
} catch (error) {
  console.log('‚ùå Erreur de connexion au serveur Django:', error.message);
}

// Test 2: V√©rifier les modifications dans MapLayers.tsx
console.log('\n2Ô∏è‚É£ V√©rification des modifications dans MapLayers.tsx...');
try {
  const fs = require('fs');
  const mapLayersContent = fs.readFileSync('src/components/MapLayers.tsx', 'utf8');
  
  const checks = [
    { name: 'Intervalle de 10 minutes', pattern: /600000/ },
    { name: '√âtat autoRefreshEnabled', pattern: /autoRefreshEnabled/ },
    { name: 'V√©rification de l\'√©l√©ment actif', pattern: /activeElement/ },
    { name: '√âv√©nements disableAutoRefresh', pattern: /disableAutoRefresh/ },
    { name: '√âv√©nements enableAutoRefresh', pattern: /enableAutoRefresh/ }
  ];
  
  checks.forEach(check => {
    if (check.pattern.test(mapLayersContent)) {
      console.log(`‚úÖ ${check.name} - Pr√©sent`);
    } else {
      console.log(`‚ùå ${check.name} - Manquant`);
    }
  });
} catch (error) {
  console.log('‚ùå Erreur lors de la lecture de MapLayers.tsx:', error.message);
}

// Test 3: V√©rifier les modifications dans BaliseManagement.tsx
console.log('\n3Ô∏è‚É£ V√©rification des modifications dans BaliseManagement.tsx...');
try {
  const fs = require('fs');
  const baliseManagementContent = fs.readFileSync('src/components/BaliseManagement.tsx', 'utf8');
  
  const checks = [
    { name: 'Attribut data-form-type', pattern: /data-form-type="balise"/ },
    { name: 'Attribut data-submitting', pattern: /data-submitting/ },
    { name: '√âv√©nement disableAutoRefresh', pattern: /disableAutoRefresh/ },
    { name: '√âv√©nement enableAutoRefresh', pattern: /enableAutoRefresh/ }
  ];
  
  checks.forEach(check => {
    if (check.pattern.test(baliseManagementContent)) {
      console.log(`‚úÖ ${check.name} - Pr√©sent`);
    } else {
      console.log(`‚ùå ${check.name} - Manquant`);
    }
  });
} catch (error) {
  console.log('‚ùå Erreur lors de la lecture de BaliseManagement.tsx:', error.message);
}

// Test 4: V√©rifier que le serveur frontend fonctionne
console.log('\n4Ô∏è‚É£ Test de connexion au serveur frontend...');
try {
  const response = execSync('curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/', { encoding: 'utf8' });
  if (response.trim() === '200') {
    console.log('‚úÖ Serveur frontend accessible');
  } else {
    console.log('‚ùå Serveur frontend non accessible (code:', response.trim(), ')');
  }
} catch (error) {
  console.log('‚ùå Erreur de connexion au serveur frontend:', error.message);
}

console.log('\nüéØ R√©sum√© des corrections apport√©es :');
console.log('‚Ä¢ Intervalle de rafra√Æchissement augment√© √† 10 minutes');
console.log('‚Ä¢ D√©tection am√©lior√©e des formulaires ouverts');
console.log('‚Ä¢ D√©tection de l\'utilisateur en train de taper');
console.log('‚Ä¢ D√©sactivation temporaire du rafra√Æchissement automatique');
console.log('‚Ä¢ √âv√©nements personnalis√©s pour contr√¥ler le rafra√Æchissement');
console.log('‚Ä¢ Attributs de d√©tection sur le formulaire et les boutons');

console.log('\n‚ú® Le formulaire d\'ajout de balise ne devrait plus se rafra√Æchir constamment !');
