#!/usr/bin/env python3
"""
Script de test pour la galerie m√©dia compl√®te
Teste l'upload, l'affichage, les likes et commentaires
"""

import requests
import json
import os
from pathlib import Path

# Configuration
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api"

def test_media_gallery():
    """Test complet de la galerie m√©dia"""
    
    print("üß™ Test de la galerie m√©dia compl√®te")
    print("=" * 50)
    
    # 1. Connexion
    print("\n1. Connexion utilisateur...")
    login_data = {
        "email": "admin@blue-track.com",
        "password": "admin123"
    }
    
    try:
        response = requests.post(f"{API_BASE}/users/login/", json=login_data)
        if response.status_code == 200:
            token = response.json().get('token')
            headers = {'Authorization': f'Token {token}'}
            print("‚úÖ Connexion r√©ussie")
        else:
            print(f"‚ùå Erreur de connexion: {response.status_code} - {response.text}")
            return
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return
    
    # 2. Cr√©er un fichier de test
    print("\n2. Cr√©ation d'un fichier de test...")
    test_file_path = Path(__file__).parent / "test_image.txt"
    with open(test_file_path, 'w') as f:
        f.write("Ceci est un fichier de test pour la galerie m√©dia")
    
    # 3. Upload du fichier
    print("\n3. Upload du fichier...")
    try:
        with open(test_file_path, 'rb') as f:
            files = {'file': ('test_image.txt', f, 'text/plain')}
            data = {
                'name': 'Fichier de test',
                'description': 'Description du fichier de test',
                'category': 'other',
                'is_public': 'true',
                'is_downloadable': 'true'
            }
            
            response = requests.post(
                f"{API_BASE}/media/files/",
                files=files,
                data=data,
                headers=headers
            )
            
            if response.status_code == 201:
                media_data = response.json()
                print(f"‚úÖ R√©ponse upload: {json.dumps(media_data, indent=2)}")
                media_id = media_data['id']
                print(f"‚úÖ Fichier upload√© avec succ√®s - ID: {media_id}")
                print(f"   Nom: {media_data.get('name', 'N/A')}")
                print(f"   Type: {media_data.get('media_type', 'N/A')}")
                print(f"   Taille: {media_data.get('file_size_human', 'N/A')}")
            else:
                print(f"‚ùå Erreur upload: {response.status_code} - {response.text}")
                return
    except Exception as e:
        print(f"‚ùå Erreur upload: {e}")
        return
    
    # 4. R√©cup√©rer la liste des fichiers
    print("\n4. R√©cup√©ration de la liste des fichiers...")
    try:
        response = requests.get(f"{API_BASE}/media/files/", headers=headers)
        if response.status_code == 200:
            files_data = response.json()
            files_list = files_data.get('results', files_data)
            print(f"‚úÖ {len(files_list)} fichier(s) trouv√©(s)")
            
            for file in files_list:
                print(f"   - {file['name']} ({file['media_type']}) - {file['like_count']} likes")
        else:
            print(f"‚ùå Erreur r√©cup√©ration: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration: {e}")
    
    # 5. Tester le like
    print("\n5. Test du syst√®me de like...")
    try:
        # Ajouter un like
        response = requests.post(f"{API_BASE}/media/files/{media_id}/like/", headers=headers)
        if response.status_code in [200, 201]:
            print("‚úÖ Like ajout√© avec succ√®s")
        else:
            print(f"‚ùå Erreur like: {response.status_code} - {response.text}")
        
        # V√©rifier le fichier mis √† jour
        response = requests.get(f"{API_BASE}/media/files/{media_id}/", headers=headers)
        if response.status_code == 200:
            updated_file = response.json()
            print(f"   Nombre de likes: {updated_file['like_count']}")
            print(f"   Est lik√© par l'utilisateur: {updated_file['is_liked']}")
    except Exception as e:
        print(f"‚ùå Erreur like: {e}")
    
    # 6. Tester les commentaires
    print("\n6. Test du syst√®me de commentaires...")
    try:
        # Ajouter un commentaire
        comment_data = {'content': 'Ceci est un commentaire de test sur le fichier m√©dia'}
        response = requests.post(
            f"{API_BASE}/media/files/{media_id}/comments/",
            json=comment_data,
            headers=headers
        )
        
        if response.status_code == 201:
            print("‚úÖ Commentaire ajout√© avec succ√®s")
        else:
            print(f"‚ùå Erreur commentaire: {response.status_code} - {response.text}")
        
        # R√©cup√©rer les commentaires
        response = requests.get(f"{API_BASE}/media/files/{media_id}/comments/", headers=headers)
        if response.status_code == 200:
            comments = response.json()
            print(f"   Nombre de commentaires: {len(comments)}")
            for comment in comments:
                print(f"   - {comment.get('user_name', 'N/A')}: {comment.get('content', 'N/A')}")
    except Exception as e:
        print(f"‚ùå Erreur commentaires: {e}")
    
    # 7. Tester le t√©l√©chargement
    print("\n7. Test du t√©l√©chargement...")
    try:
        response = requests.get(f"{API_BASE}/media/files/{media_id}/download/", headers=headers)
        if response.status_code == 200:
            print("‚úÖ T√©l√©chargement r√©ussi")
            print(f"   Taille du fichier t√©l√©charg√©: {len(response.content)} bytes")
        else:
            print(f"‚ùå Erreur t√©l√©chargement: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur t√©l√©chargement: {e}")
    
    # 8. R√©cup√©rer les statistiques
    print("\n8. Test des statistiques...")
    try:
        response = requests.get(f"{API_BASE}/media/stats/", headers=headers)
        if response.status_code == 200:
            stats = response.json()
            print("‚úÖ Statistiques r√©cup√©r√©es:")
            print(f"   Total fichiers: {stats['global']['total_files']}")
            print(f"   Taille totale: {stats['global']['total_size_human']}")
            print(f"   Fichiers utilisateur: {stats['user']['files_count']}")
        else:
            print(f"‚ùå Erreur statistiques: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur statistiques: {e}")
    
    # 9. Nettoyage
    print("\n9. Nettoyage...")
    try:
        # Supprimer le fichier de test
        response = requests.delete(f"{API_BASE}/media/files/{media_id}/", headers=headers)
        if response.status_code == 204:
            print("‚úÖ Fichier de test supprim√©")
        else:
            print(f"‚ùå Erreur suppression: {response.status_code} - {response.text}")
        
        # Supprimer le fichier local
        if test_file_path.exists():
            test_file_path.unlink()
            print("‚úÖ Fichier local supprim√©")
    except Exception as e:
        print(f"‚ùå Erreur nettoyage: {e}")
    
    print("\nüéâ Test de la galerie m√©dia termin√© !")
    print("=" * 50)

if __name__ == "__main__":
    test_media_gallery()
